version: "3.9"

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-recurring_events}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-recurring_events}" ]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

  # api:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   environment:
  #     # Node/HTTP
  #     NODE_ENV: development
  #     PORT: 3000
  #     CORS_ORIGIN: ${CORS_ORIGIN:-*}

  #     # DB (API -> Postgres no serviço 'db')
  #     DB_HOST: db
  #     DB_PORT: 5432
  #     DB_USER: ${DB_USER:-postgres}
  #     DB_PASSWORD: ${DB_PASSWORD:-postgres}
  #     DB_NAME: ${DB_NAME:-recurring_events}
  #     DB_LOGGING: "false"

  #     # Performance (workers/cluster)
  #     WORKERS_ENABLED: ${WORKERS_ENABLED:-false}
  #     WORKER_POOL_SIZE: ${WORKER_POOL_SIZE:-0} # 0 = nº de CPUs
  #     WORKER_MIN_ITEMS: ${WORKER_MIN_ITEMS:-64}

  #     CLUSTER_ENABLED: ${CLUSTER_ENABLED:-false}
  #     CLUSTER_WORKERS: ${CLUSTER_WORKERS:-0} # 0 = nº de CPUs
  #   ports:
  #     - "3000:3000"
  #   # compila, migra e sobe server/cluster conforme CLUSTER_ENABLED
  #   command: >
  #     sh -c "npm run build &&
  #            npx sequelize-cli db:migrate &&
  #            if [ \"$CLUSTER_ENABLED\" = \"true\" ];
  #            then node dist/cluster.js;
  #            else node dist/server.js; fi"

volumes:
  pgdata:
