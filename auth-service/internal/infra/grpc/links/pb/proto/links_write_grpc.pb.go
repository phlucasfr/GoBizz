// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/links_write.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LinksServiceWrite_CreateLink_FullMethodName       = "/links_write.LinksServiceWrite/CreateLink"
	LinksServiceWrite_DeleteLink_FullMethodName       = "/links_write.LinksServiceWrite/DeleteLink"
	LinksServiceWrite_UpdateLink_FullMethodName       = "/links_write.LinksServiceWrite/UpdateLink"
	LinksServiceWrite_UpdateLinkClicks_FullMethodName = "/links_write.LinksServiceWrite/UpdateLinkClicks"
)

// LinksServiceWriteClient is the client API for LinksServiceWrite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinksServiceWriteClient interface {
	CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*CreateLinkResponse, error)
	DeleteLink(ctx context.Context, in *DeleteLinkRequest, opts ...grpc.CallOption) (*DeleteLinkResponse, error)
	UpdateLink(ctx context.Context, in *UpdateLinkRequest, opts ...grpc.CallOption) (*UpdateLinkResponse, error)
	UpdateLinkClicks(ctx context.Context, in *UpdateLinkClicksRequest, opts ...grpc.CallOption) (*UpdateLinkClicksResponse, error)
}

type linksServiceWriteClient struct {
	cc grpc.ClientConnInterface
}

func NewLinksServiceWriteClient(cc grpc.ClientConnInterface) LinksServiceWriteClient {
	return &linksServiceWriteClient{cc}
}

func (c *linksServiceWriteClient) CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*CreateLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLinkResponse)
	err := c.cc.Invoke(ctx, LinksServiceWrite_CreateLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksServiceWriteClient) DeleteLink(ctx context.Context, in *DeleteLinkRequest, opts ...grpc.CallOption) (*DeleteLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLinkResponse)
	err := c.cc.Invoke(ctx, LinksServiceWrite_DeleteLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksServiceWriteClient) UpdateLink(ctx context.Context, in *UpdateLinkRequest, opts ...grpc.CallOption) (*UpdateLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLinkResponse)
	err := c.cc.Invoke(ctx, LinksServiceWrite_UpdateLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksServiceWriteClient) UpdateLinkClicks(ctx context.Context, in *UpdateLinkClicksRequest, opts ...grpc.CallOption) (*UpdateLinkClicksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLinkClicksResponse)
	err := c.cc.Invoke(ctx, LinksServiceWrite_UpdateLinkClicks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinksServiceWriteServer is the server API for LinksServiceWrite service.
// All implementations must embed UnimplementedLinksServiceWriteServer
// for forward compatibility.
type LinksServiceWriteServer interface {
	CreateLink(context.Context, *CreateLinkRequest) (*CreateLinkResponse, error)
	DeleteLink(context.Context, *DeleteLinkRequest) (*DeleteLinkResponse, error)
	UpdateLink(context.Context, *UpdateLinkRequest) (*UpdateLinkResponse, error)
	UpdateLinkClicks(context.Context, *UpdateLinkClicksRequest) (*UpdateLinkClicksResponse, error)
	mustEmbedUnimplementedLinksServiceWriteServer()
}

// UnimplementedLinksServiceWriteServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLinksServiceWriteServer struct{}

func (UnimplementedLinksServiceWriteServer) CreateLink(context.Context, *CreateLinkRequest) (*CreateLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLink not implemented")
}
func (UnimplementedLinksServiceWriteServer) DeleteLink(context.Context, *DeleteLinkRequest) (*DeleteLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLink not implemented")
}
func (UnimplementedLinksServiceWriteServer) UpdateLink(context.Context, *UpdateLinkRequest) (*UpdateLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLink not implemented")
}
func (UnimplementedLinksServiceWriteServer) UpdateLinkClicks(context.Context, *UpdateLinkClicksRequest) (*UpdateLinkClicksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLinkClicks not implemented")
}
func (UnimplementedLinksServiceWriteServer) mustEmbedUnimplementedLinksServiceWriteServer() {}
func (UnimplementedLinksServiceWriteServer) testEmbeddedByValue()                           {}

// UnsafeLinksServiceWriteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinksServiceWriteServer will
// result in compilation errors.
type UnsafeLinksServiceWriteServer interface {
	mustEmbedUnimplementedLinksServiceWriteServer()
}

func RegisterLinksServiceWriteServer(s grpc.ServiceRegistrar, srv LinksServiceWriteServer) {
	// If the following call pancis, it indicates UnimplementedLinksServiceWriteServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LinksServiceWrite_ServiceDesc, srv)
}

func _LinksServiceWrite_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceWriteServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinksServiceWrite_CreateLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceWriteServer).CreateLink(ctx, req.(*CreateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinksServiceWrite_DeleteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceWriteServer).DeleteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinksServiceWrite_DeleteLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceWriteServer).DeleteLink(ctx, req.(*DeleteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinksServiceWrite_UpdateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceWriteServer).UpdateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinksServiceWrite_UpdateLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceWriteServer).UpdateLink(ctx, req.(*UpdateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinksServiceWrite_UpdateLinkClicks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLinkClicksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceWriteServer).UpdateLinkClicks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinksServiceWrite_UpdateLinkClicks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceWriteServer).UpdateLinkClicks(ctx, req.(*UpdateLinkClicksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinksServiceWrite_ServiceDesc is the grpc.ServiceDesc for LinksServiceWrite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinksServiceWrite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "links_write.LinksServiceWrite",
	HandlerType: (*LinksServiceWriteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLink",
			Handler:    _LinksServiceWrite_CreateLink_Handler,
		},
		{
			MethodName: "DeleteLink",
			Handler:    _LinksServiceWrite_DeleteLink_Handler,
		},
		{
			MethodName: "UpdateLink",
			Handler:    _LinksServiceWrite_UpdateLink_Handler,
		},
		{
			MethodName: "UpdateLinkClicks",
			Handler:    _LinksServiceWrite_UpdateLinkClicks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/links_write.proto",
}
