// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/links_read.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LinksServiceRead_GetLink_FullMethodName          = "/links_read.LinksServiceRead/GetLink"
	LinksServiceRead_GetCustomerLinks_FullMethodName = "/links_read.LinksServiceRead/GetCustomerLinks"
)

// LinksServiceReadClient is the client API for LinksServiceRead service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinksServiceReadClient interface {
	GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*GetLinkResponse, error)
	GetCustomerLinks(ctx context.Context, in *GetCustomerLinksRequest, opts ...grpc.CallOption) (*GetCustomerLinksResponse, error)
}

type linksServiceReadClient struct {
	cc grpc.ClientConnInterface
}

func NewLinksServiceReadClient(cc grpc.ClientConnInterface) LinksServiceReadClient {
	return &linksServiceReadClient{cc}
}

func (c *linksServiceReadClient) GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*GetLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLinkResponse)
	err := c.cc.Invoke(ctx, LinksServiceRead_GetLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linksServiceReadClient) GetCustomerLinks(ctx context.Context, in *GetCustomerLinksRequest, opts ...grpc.CallOption) (*GetCustomerLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCustomerLinksResponse)
	err := c.cc.Invoke(ctx, LinksServiceRead_GetCustomerLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinksServiceReadServer is the server API for LinksServiceRead service.
// All implementations must embed UnimplementedLinksServiceReadServer
// for forward compatibility.
type LinksServiceReadServer interface {
	GetLink(context.Context, *GetLinkRequest) (*GetLinkResponse, error)
	GetCustomerLinks(context.Context, *GetCustomerLinksRequest) (*GetCustomerLinksResponse, error)
	mustEmbedUnimplementedLinksServiceReadServer()
}

// UnimplementedLinksServiceReadServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLinksServiceReadServer struct{}

func (UnimplementedLinksServiceReadServer) GetLink(context.Context, *GetLinkRequest) (*GetLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (UnimplementedLinksServiceReadServer) GetCustomerLinks(context.Context, *GetCustomerLinksRequest) (*GetCustomerLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerLinks not implemented")
}
func (UnimplementedLinksServiceReadServer) mustEmbedUnimplementedLinksServiceReadServer() {}
func (UnimplementedLinksServiceReadServer) testEmbeddedByValue()                          {}

// UnsafeLinksServiceReadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinksServiceReadServer will
// result in compilation errors.
type UnsafeLinksServiceReadServer interface {
	mustEmbedUnimplementedLinksServiceReadServer()
}

func RegisterLinksServiceReadServer(s grpc.ServiceRegistrar, srv LinksServiceReadServer) {
	// If the following call pancis, it indicates UnimplementedLinksServiceReadServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LinksServiceRead_ServiceDesc, srv)
}

func _LinksServiceRead_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceReadServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinksServiceRead_GetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceReadServer).GetLink(ctx, req.(*GetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinksServiceRead_GetCustomerLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinksServiceReadServer).GetCustomerLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinksServiceRead_GetCustomerLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinksServiceReadServer).GetCustomerLinks(ctx, req.(*GetCustomerLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinksServiceRead_ServiceDesc is the grpc.ServiceDesc for LinksServiceRead service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinksServiceRead_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "links_read.LinksServiceRead",
	HandlerType: (*LinksServiceReadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLink",
			Handler:    _LinksServiceRead_GetLink_Handler,
		},
		{
			MethodName: "GetCustomerLinks",
			Handler:    _LinksServiceRead_GetCustomerLinks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/links_read.proto",
}
