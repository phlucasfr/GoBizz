// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customer_queries.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const activateCustomer = `-- name: ActivateCustomer :one
UPDATE customer
SET
  is_active = true,
  updated_at = NOW()
WHERE id = $1
RETURNING id, name, email, phone, cpf_cnpj, is_active, updated_at, created_at, hashed_password
`

func (q *Queries) ActivateCustomer(ctx context.Context, id pgtype.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, activateCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.CpfCnpj,
		&i.IsActive,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.HashedPassword,
	)
	return i, err
}

const activateCustomerByEmail = `-- name: ActivateCustomerByEmail :one
UPDATE customer
SET
  is_active = true,
  updated_at = NOW()
WHERE email = $1
RETURNING id, name, email, phone, cpf_cnpj, is_active, updated_at, created_at, hashed_password
`

func (q *Queries) ActivateCustomerByEmail(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRow(ctx, activateCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.CpfCnpj,
		&i.IsActive,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.HashedPassword,
	)
	return i, err
}

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (name, email, phone, cpf_cnpj, is_active, hashed_password)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, email, phone, cpf_cnpj, is_active, updated_at, created_at, hashed_password
`

type CreateCustomerParams struct {
	Name           string `json:"name"`
	Email          string `json:"email"`
	Phone          string `json:"phone"`
	CpfCnpj        string `json:"cpf_cnpj"`
	IsActive       bool   `json:"is_active"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.CpfCnpj,
		arg.IsActive,
		arg.HashedPassword,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.CpfCnpj,
		&i.IsActive,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.HashedPassword,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :execrows
DELETE FROM customer WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteCustomer, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT id, name, email, phone, cpf_cnpj, is_active, updated_at, created_at, hashed_password FROM customer WHERE email = $1
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.CpfCnpj,
		&i.IsActive,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.HashedPassword,
	)
	return i, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, name, email, phone, cpf_cnpj, is_active, updated_at, created_at, hashed_password FROM customer WHERE id = $1
`

func (q *Queries) GetCustomerByID(ctx context.Context, id pgtype.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.CpfCnpj,
		&i.IsActive,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.HashedPassword,
	)
	return i, err
}

const hasActiveCustomer = `-- name: HasActiveCustomer :one
SELECT EXISTS (
  SELECT 1 FROM customer WHERE (email = $1 OR phone = $2) AND is_active = true
)
`

type HasActiveCustomerParams struct {
	Email string `json:"email"`
	Phone string `json:"phone"`
}

func (q *Queries) HasActiveCustomer(ctx context.Context, arg HasActiveCustomerParams) (bool, error) {
	row := q.db.QueryRow(ctx, hasActiveCustomer, arg.Email, arg.Phone)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, name, email, phone, cpf_cnpj, is_active, updated_at, created_at, hashed_password FROM customer ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListCompaniesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCompanies(ctx context.Context, arg ListCompaniesParams) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.CpfCnpj,
			&i.IsActive,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.HashedPassword,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customer
SET
  name = COALESCE($2, name),
  email = COALESCE($3, email),
  phone = COALESCE($4, phone),
  cpf_cnpj = COALESCE($5, cpf_cnpj),
  is_active = COALESCE($6, is_active),
  updated_at = NOW()
WHERE id = $1
RETURNING id, name, email, phone, cpf_cnpj, is_active, updated_at, created_at, hashed_password
`

type UpdateCustomerParams struct {
	ID       pgtype.UUID `json:"id"`
	Name     string      `json:"name"`
	Email    string      `json:"email"`
	Phone    string      `json:"phone"`
	CpfCnpj  string      `json:"cpf_cnpj"`
	IsActive bool        `json:"is_active"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.CpfCnpj,
		arg.IsActive,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.CpfCnpj,
		&i.IsActive,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.HashedPassword,
	)
	return i, err
}

const updatePasswordByEmail = `-- name: UpdatePasswordByEmail :execrows
UPDATE customer
SET
  hashed_password = $2,
  updated_at = NOW()
WHERE email = $1
`

type UpdatePasswordByEmailParams struct {
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) UpdatePasswordByEmail(ctx context.Context, arg UpdatePasswordByEmailParams) (int64, error) {
	result, err := q.db.Exec(ctx, updatePasswordByEmail, arg.Email, arg.HashedPassword)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
