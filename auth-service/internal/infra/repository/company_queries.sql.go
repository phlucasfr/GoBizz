// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: company_queries.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const activateCompany = `-- name: ActivateCompany :one
UPDATE company 
SET 
    is_active = true,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, email, phone, cpf_cnpj, is_active, updated_at, created_at, hashed_password
`

func (q *Queries) ActivateCompany(ctx context.Context, id pgtype.UUID) (Company, error) {
	row := q.db.QueryRow(ctx, activateCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.CpfCnpj,
		&i.IsActive,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.HashedPassword,
	)
	return i, err
}

const createCompany = `-- name: CreateCompany :one
INSERT INTO company (name, email, phone, cpf_cnpj, is_active, hashed_password)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, email, phone, cpf_cnpj, is_active, updated_at, created_at, hashed_password
`

type CreateCompanyParams struct {
	Name           string `json:"name"`
	Email          string `json:"email"`
	Phone          string `json:"phone"`
	CpfCnpj        string `json:"cpf_cnpj"`
	IsActive       bool   `json:"is_active"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, createCompany,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.CpfCnpj,
		arg.IsActive,
		arg.HashedPassword,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.CpfCnpj,
		&i.IsActive,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.HashedPassword,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM company WHERE id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCompany, id)
	return err
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT id, name, email, phone, cpf_cnpj, is_active, updated_at, created_at, hashed_password FROM company WHERE id = $1
`

func (q *Queries) GetCompanyByID(ctx context.Context, id pgtype.UUID) (Company, error) {
	row := q.db.QueryRow(ctx, getCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.CpfCnpj,
		&i.IsActive,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.HashedPassword,
	)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, name, email, phone, cpf_cnpj, is_active, updated_at, created_at, hashed_password FROM company ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListCompaniesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCompanies(ctx context.Context, arg ListCompaniesParams) ([]Company, error) {
	rows, err := q.db.Query(ctx, listCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.CpfCnpj,
			&i.IsActive,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.HashedPassword,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE company 
SET 
    name = COALESCE($2, name),
    email = COALESCE($3, email),
    phone = COALESCE($4, phone),
    cpf_cnpj = COALESCE($5, cpf_cnpj),
    is_active = COALESCE($6, is_active),
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, email, phone, cpf_cnpj, is_active, updated_at, created_at, hashed_password
`

type UpdateCompanyParams struct {
	ID       pgtype.UUID `json:"id"`
	Name     string      `json:"name"`
	Email    string      `json:"email"`
	Phone    string      `json:"phone"`
	CpfCnpj  string      `json:"cpf_cnpj"`
	IsActive bool        `json:"is_active"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, updateCompany,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.CpfCnpj,
		arg.IsActive,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.CpfCnpj,
		&i.IsActive,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.HashedPassword,
	)
	return i, err
}
